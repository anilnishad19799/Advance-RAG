# print(f"‚úÖ Chunked into {len(chunked_docs)} chunks\n")

# # Preview first 5 chunks
# for i, chunk in enumerate(chunked_docs[:5], 1):
#     print(f"Chunk {i}:\n{chunk.page_content}\n{'-'*50}")

# -------------------------------
# 3Ô∏è‚É£ Build ChromaDB Index
# # -------------------------------
# # store index in data/vector_database relative to project root
# project_root = Path(__file__).parent.parent.parent
# medical_vector_db_path = project_root / "data/medical/vector_database"
# medical_indexer = ChromaDBIndexer(persist_directory=medical_vector_db_path)
# medical_indexer.build_index(medical_chunked_docs)

# project_root = Path(__file__).parent.parent.parent
# sport_vector_db_path = project_root / "data/sport/vector_database"
# sport_indexer = ChromaDBIndexer(persist_directory=sport_vector_db_path)
# sport_indexer.build_index(sport_chunked_docs)

# # Using BM25 encoder

# # Build or load BM25 index
# medical_bm25_path = project_root / "data/medical/bm25"
# medical_bm25_indexer = BM25Indexer(persist_directory=medical_bm25_path, top_k=3)
# medical_bm25_indexer.build_index(medical_chunked_docs)

# sport_bm25_path = project_root / "data/sport/bm25"
# sport_bm25_indexer = BM25Indexer(persist_directory=sport_bm25_path, top_k=3)
# sport_bm25_indexer.build_index(sport_chunked_docs)


# medical_retriever = chroma_medical_index.as_retriever(k=3)
# sport_retriever = chroma_sport_index.as_retriever(k=3)



# Later: just load the index
# bm25_indexer.load_index()

# Retrieve documents
# query = "Sport Authority Of India"
# top_docs = bm25_indexer.retrieve(query)

# for i, doc in enumerate(top_docs, 1):
#     print(f"Doc {i}:\n{doc.page_content[:200]}...\n")


# -------------------------------
# 4Ô∏è‚É£ Get Retriever
# -------------------------------
# retriever = indexer.as_retriever(k=3)

# # Preview a retrieval example
# query = "Explain Sport Authority of India"
# retrieved_docs = retriever.get_relevant_documents(query)
# print(f"\n‚úÖ Retrieved {len(retrieved_docs)} documents for query: '{query}'")
# for i, doc in enumerate(retrieved_docs, 1):
#     print(f"Doc {i}:\n{doc.page_content}\n{'-'*50}")

# -------------------------------
# Generate multiple queries
# -------------------------------
# mq_gen = MultiQueryGenerator(num_queries=3)
# original_query = "Sport Authority of India"
# sub_queries = mq_gen.generate(original_query)

# print("Generated Sub-Queries:")
# for i, q in enumerate(sub_queries, 1):
#     print(f"{i}. {q}")


# -------------------------------
# Retrieve Documents (Hybrid)
# # -------------------------------
# retriever = HybridRetriever(chunked_docs, top_k=3)
# retrieved_docs = retriever.get_relevant_documents(sub_queries)

# # -------------------------------
# # Preview Retrieved Documents
# # -------------------------------
# for i, doc in enumerate(retrieved_docs, 1):
#     print(f"\nüìÑ Document {i} Preview:\n{doc.page_content[:200]}...\n")


# ------------------------------------------
# Hybrid HybridRetriever

# project_root = Path(__file__).parent.parent.parent
# bm25_path = project_root / "data" / "bm25"
# chroma_path = project_root / "data" / "vector_database"

# retriever = HybridRetriever(
#     bm25_index_path=str(bm25_path), chroma_index_path=str(chroma_path), top_k=3
# )

# # Example queries (after multi-query generation)
# queries = [
#     "Sports Authority of India?",
#     "Pitch Orientation",
#     "FIH World Cup Qualifying Tournaments",
# ]
# retrieved_docs = retriever.get_relevant_documents(queries)

# for i, doc in enumerate(retrieved_docs, 1):
#     print(f"Doc {i}: {doc.page_content[:200]}...\n")


# -------------------------------------------
# Cohere rank retriever work here


# -------------------------------
# 5Ô∏è‚É£ Cohere Rerank Retriever
# -------------------------------

# -------------------------------
# 4Ô∏è‚É£ Hybrid Retriever (BM25 + ChromaDB)
# -------------------------------
# project_root = Path(__file__).parent.parent.parent
# bm25_path = project_root / "data" / "medical" / "bm25"
# chroma_path = project_root / "data" / "medical" / "vector_database"

# hybrid_retriever = HybridRetriever(
#     bm25_index_path=str(bm25_path), chroma_index_path=str(chroma_path), top_k=5
# )

# from src.retriever.hybrid_adapter import HybridRetrieverAdapter

# # Wrap hybrid retriever to be compatible with LangChain
# adapter = HybridRetrieverAdapter(hybrid_retriever)

# # Use CohereRerank for reranking
# cohere_retriever = CohererankRetriever(base_retriever=adapter)

# # Example query
# query = "Sports Authority of India"

# # Retrieve reranked documents (top 5)
# top_docs = cohere_retriever.get_relevant_documents(query, top_k=5)

# # Preview results
# for i, doc in enumerate(top_docs, 1):
#     print(f"Doc {i}:\n{doc.page_content[:300]}...\n")


############################################

# semantic routing
# from src.routing.semantic_router import SemanticRouterRetriever
# from src.indexing.chromadb_indexer import ChromaDBIndexer

# # Suppose these are your prebuilt ChromaDB indexes
# chroma_medical_index = ChromaDBIndexer(persist_directory="medical_collection")
# chroma_sport_index = ChromaDBIndexer(persist_directory="sport_collection")

# medical_retriever = chroma_medical_index.as_retriever(k=3)
# sport_retriever = chroma_sport_index.as_retriever(k=3)

# # Pass retrievers to semantic router
# semantic_router = SemanticRouterRetriever(
#     medical_retriever=medical_retriever,
#     sport_retriever=sport_retriever,
#     llm_model="gpt-4",
# )

# # Example query
# query = "What are the symptoms of diabetes?"
# answer, docs = semantic_router.answer_query(query)

# print("Answer:", answer)
# for i, doc in enumerate(docs, 1):
#     print(f"[Doc {i}] {doc.page_content[:150]}...")
